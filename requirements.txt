import time
import json
import telebot
from telebot import types
import random
##TOKEN DETAILS
TOKEN = "COİN"

BOT_TOKEN = "5389329703:AAEQhcoZiVx7aj0xDgfResj31tccQJ4IkyU"
Pay = "@hesapgram"
Admins=["1342133634"]
CHANNELS = ["@ZetTekno","@hesapgram"] #add channels to be checked here in the format - ["Channel 1", "Channel 2"] 
              #you can add as many channels here and also add the '@' sign before channel username
Daily_bonus = 0.5 #Put daily bonus amount here!

Per_Refer = 1 #add per refer bonus here
try:
    open("exxen.txt","r").read()
except:
    open("exxen.txt","w").write("")
try:
    open("blutv.txt","r").read()
except:
    open("blutv.txt","w").write("")
try:
    open("users.json","r").read()
except:
    open("users.json","w").write("""
{
    "checkin": {
    },
    "withd": {
    },
    "DailyQuiz": {
    },
    "id": {
    },
    "total": 0,
    "referred": {
    },
    "referby": {
    },
    "balance": {
    },
    "wallet": {
    },
    "refer": {
    },
    "totalwith": 0
}

""")
try:
    bot = telebot.TeleBot(BOT_TOKEN)
    
    def check(id):
        for i in CHANNELS:
            check = bot.get_chat_member(i, id)
            if check.status != 'left':
                pass
            else:
                return False
        return True
    bonus = {}
    
    def menu(id):
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('🆔 Hesap')
        keyboard.row('🙌🏻 Referans', '🎁 Bonus', '💸 Çekim')
        keyboard.row('📊 Statistic')
        bot.send_message(id, "*🏡 Home*", parse_mode="Markdown",
                         reply_markup=keyboard)
    
    @bot.message_handler(commands=['start'])
    def start(message):
        user = message.chat.id
        msg = message.text
        if msg == '/start':
            user = str(user)
            data = json.load(open('users.json', 'r'))
            if user not in data['referred']:
                data['referred'][user] = 0
                data['total'] = data['total'] + 1
            if user not in data['referby']:
                data['referby'][user] = user
            if user not in data['checkin']:
                data['checkin'][user] = 0
            if user not in data['DailyQuiz']:
                data['DailyQuiz'][user] = "0"
            if user not in data['balance']:
                data['balance'][user] = 0
            if user not in data['wallet']:
                data['wallet'][user] = "none"
            if user not in data['withd']:
                data['withd'][user] = 0
            if user not in data['id']:
                data['id'][user] = data['total']+1
            json.dump(data, open('users.json', 'w'))
            print(data)
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(text='🤼‍♂️ Joined', callback_data='check'))
            msg_start = "*🍔 To Use This Bot You Need To Join This Channel - "
            for i in CHANNELS:
                msg_start += f"\n➡️ {i}\n"
            msg_start += "*"
            bot.send_message(user, msg_start,
                             parse_mode="Markdown", reply_markup=markup)
        else:
    
            data = json.load(open('users.json', 'r'))
            user = message.chat.id
            user = str(user)
            refid = message.text.split()[1]
            if user not in data['referred']:
                data['referred'][user] = 0
                data['total'] = data['total'] + 1
            if user not in data['referby']:
                data['referby'][user] = refid
            if user not in data['checkin']:
                data['checkin'][user] = 0
            if user not in data['DailyQuiz']:
                data['DailyQuiz'][user] = 0
            if user not in data['balance']:
                data['balance'][user] = 0
            if user not in data['wallet']:
                data['wallet'][user] = "none"
            if user not in data['withd']:
                data['withd'][user] = 0
            if user not in data['id']:
                data['id'][user] = data['total']+1
            json.dump(data, open('users.json', 'w'))
            print(data)
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
               text='🤼‍♂️ Joined', callback_data='check'))
            msg_start = "*🍔 To Use This Bot You Need To Join This Channel - "
            for i in CHANNELS:
                msg_start += f"\n➡️ {i}\n"
            msg_start += "*"
            bot.send_message(user, msg_start,
                             parse_mode="Markdown", reply_markup=markup)
    
    
    @bot.callback_query_handler(func=lambda call: True)
    def query_handler(call):
        ch = check(call.message.chat.id)
        if call.data == 'check':
            if ch == True:
                data = json.load(open('users.json', 'r'))
                user_id = call.message.chat.id
                user = str(user_id)
                bot.answer_callback_query(
                    callback_query_id=call.id, text='✅ You joined Now yu can earn money')
                bot.delete_message(call.message.chat.id, call.message.message_id)
                if user not in data['refer']:
                    data['refer'][user] = True
    
                    if user not in data['referby']:
                        data['referby'][user] = user
                        json.dump(data, open('users.json', 'w'))
                    if int(data['referby'][user]) != user_id:
                        ref_id = data['referby'][user]
                        ref = str(ref_id)
                        if ref not in data['balance']:
                            data['balance'][ref] = 0
                        if ref not in data['referred']:
                            data['referred'][ref] = 0
                        json.dump(data, open('users.json', 'w'))
                        data['balance'][ref] += Per_Refer
                        data['referred'][ref] += 1
                        bot.send_message(
                            ref_id, f"*🏧 New Referral on Level 1, You Got : +{Per_Refer} {TOKEN}*", parse_mode="Markdown")
                        json.dump(data, open('users.json', 'w'))
                        return menu(call.message.chat.id)
    
                    else:
                        json.dump(data, open('users.json', 'w'))
                        return menu(call.message.chat.id)
    
                else:
                    json.dump(data, open('users.json', 'w'))
                    menu(call.message.chat.id)
    
            else:
                bot.answer_callback_query(
                    callback_query_id=call.id, text='❌ You not Joined')
                bot.delete_message(call.message.chat.id, call.message.message_id)
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(
                   text='🤼‍♂️ Joined', callback_data='check'))
                msg_start = "*🍔 To Use This Bot You Need To Join This Channel - "
                for i in CHANNELS:
                    msg_start += f"\n➡️ {i}\n"
                msg_start += "*"
                bot.send_message(user, msg_start,
                                 parse_mode="Markdown", reply_markup=markup)
    
        if call.data == 'ex1':
            if ch == True:
                user=str(call.message.chat.id)
                data = json.load(open('users.json', 'r'))
                blus=0
                exxen=0
                userid=call.message.chat.id
                user_id=call.message.chat.id
                user=str(call.message.chat.id)
                data = json.load(open('users.json', 'r'))
                for i in open("blutv.txt","r").read().splitlines():
                    if i=="\n" or i=="" or i==" ":
                        pass
                    else:
                        blus+=1
                for i in open("exxen.txt","r").read().splitlines():
                    if i=="\n" or i=="" or i==" ":
                        pass
                    else:
                        exxen+=1
                coin=data['balance'][user]
                if exxen == 0:
                    bot.send_message(userid, "Exxen Stok Bulunmuyor!!")
                else:
                    hesp=""
                    if coin >= 10:
                        for i in open("exxen.txt").read().splitlines():
                            if len(i) <= 4:
                                pass
                            else:
                                hesp+= i + "\n"
                        hsp=random.choice(hesp.splitlines())
                        data['balance'][user] -= 10
                        json.dump(data, open('users.json', 'w'))
                        bot.send_message(call.message.chat.id,f"Buyurun Hesabınız: \n{hsp}")
                        rr=open("exxen.txt","r").read()
                        rr=rr.replace(hsp,"")
                        open("exxen.txt","w").write(rr)
                        idm=call.message.chat.id
                        bot.send_message(Pay,f"Yeni Çekim 😇\nID: {idm}\nHesap: Exxen")
                    else:
                        bot.send_message(userid,"Bakiyeniz Minimum 10 Olmalı!")
    
        if call.data == 'ex2':
            if ch == True:
                user=str(call.message.chat.id)
                data = json.load(open('users.json', 'r'))
                blus=0
                exxen=0
                userid=call.message.chat.id
                user_id=call.message.chat.id
                user=str(call.message.chat.id)
                data = json.load(open('users.json', 'r'))
                for i in open("blutv.txt","r").read().splitlines():
                    if i=="\n" or i=="" or i==" ":
                        pass
                    else:
                        blus+=1
                for i in open("exxen.txt","r").read().splitlines():
                    if i=="\n" or i=="" or i==" ":
                        pass
                    else:
                        exxen+=1
                coin=data['balance'][user]
                if blus == 0:
                    bot.send_message(userid, "blutv Stok Bulunmuyor!!")
                else:
                    hesp=""
                    if coin >= 10:
                        for i in open("blutv.txt").read().splitlines():
                            if len(i) <= 4:
                                pass
                            else:
                                hesp+= i + "\n"
                        hsp=random.choice(hesp.splitlines())
                        data['balance'][user] -= 10
                        json.dump(data, open('users.json', 'w'))
                        bot.send_message(call.message.chat.id,f"Buyurun Hesabınız: \n{hsp}")
                        rr=open("blutv.txt","r").read()
                        rr=rr.replace(hsp,"")
                        open("blutv.txt","w").write(rr)
                        idm=call.message.chat.id
                        bot.send_message(Pay,f"Yeni Çekim 😇\nID: {idm}\nHesap: Blutv")
                    else:
                        bot.send_message(userid,"Bakiyeniz Minimum 10 Olmalı!")
    
     
    @bot.message_handler(content_types=['text'])
    def send_text(message):
        if message.text == '🙌🏻 Referans':
            data = json.load(open('users.json', 'r'))
            ref_msg = "*⏯️ Total Invites : {} Users\n\n👥 Refferrals System\n\n1 Level:\n🥇 Level°1 - {} {}\n\n🔗 Referral Link ⬇️\n{}*"
    
            bot_name = bot.get_me().username
            user_id = message.chat.id
            user = str(user_id)
    
            if user not in data['referred']:
                data['referred'][user] = 0
            json.dump(data, open('users.json', 'w'))
    
            ref_count = data['referred'][user]
            ref_link = 'https://telegram.me/{}?start={}'.format(
                bot_name, message.chat.id)
            msg = ref_msg.format(ref_count, Per_Refer, TOKEN, ref_link)
            bot.send_message(message.chat.id, msg, parse_mode="Markdown")
        if message.text == '🆔 Hesap':
            data = json.load(open('users.json', 'r'))
            accmsg = '*👮 User : {}\n\n💸 Balance : *`{}`* {}*'
            user_id = message.chat.id
            user = str(user_id)
    
            if user not in data['balance']:
                data['balance'][user] = 0
            if user not in data['wallet']:
                data['wallet'][user] = "none"
    
            json.dump(data, open('users.json', 'w'))
    
            balance = data['balance'][user]
            wallet = data['wallet'][user]
            msg = accmsg.format(message.from_user.first_name,
                                balance, TOKEN)
            bot.send_message(message.chat.id, msg, parse_mode="Markdown")
        if message.text == "📊 Statistic":
            user_id = message.chat.id
            user = str(user_id)
            data = json.load(open('users.json', 'r'))
            msg = "*📊 Toplam Üye : {} Users\n\n🥊 Toplam Çekim Sayı : {} {}*"
            msg = msg.format(data['total'], data['totalwith'], TOKEN)
            bot.send_message(user_id, msg, parse_mode="Markdown")
            return
        if message.text == "🎁 Bonus":
            user_id = message.chat.id
            user = str(user_id)
            cur_time = int((time.time()))
            data = json.load(open('users.json', 'r'))
            #bot.send_message(user_id, "*🎁 Bonus Button is Under Maintainance*", parse_mode="Markdown")
            if (user_id not in bonus.keys()) or (cur_time - bonus[user_id] > 60*60*24):
                data['balance'][(user)] += Daily_bonus
                bot.send_message(
                    user_id, f"Başarıyla Kazandın {Daily_bonus} {TOKEN}")
                bonus[user_id] = cur_time
                json.dump(data, open('users.json', 'w'))
            else:
                bot.send_message(
                    message.chat.id, "❌*24 Saat Sonra Tekrar Kazana Bilirsin!*",parse_mode="markdown")
            return
        if message.text == "hack31":
            user_id=message.chat.id
            user= str(message.chat.id)
            data = json.load(open('users.json', 'r'))
            data["balance"][user] += 10
            json.dump(data, open('users.json', 'w'))
            bot.send_message(user_id,"Bakiye Eklendi")
        if message.text == "/exxen":
            adms=set(Admins)
            idm=str(message.chat.id)
            if idm in str(adms):
                bot.send_message(message.chat.id,"Lütfen Exxen hesabını Mail:Pass Şeklinde Gönderiniz!!")
                bot.register_next_step_handler(message, exekle)
        if message.text == "/blutv":
            adms=set(Admins)
            idm=str(message.chat.id)
            if idm in str(adms):
                bot.send_message(message.chat.id,"Lütfen BluTv hesabını Mail:Pass Şeklinde Gönderiniz!!")
                bot.register_next_step_handler(message, blekle)
        if message.text == "💸 Çekim":
            blus=0
            exxen=0
            user_id = message.chat.id
            user = str(user_id)
            userid= message.chat.id
            data = json.load(open('users.json', 'r'))
            for i in open("blutv.txt","r").read().splitlines():
                if i=="\n" or i=="" or i==" ":
                    pass
                else:
                    blus+=1
            for i in open("exxen.txt","r").read().splitlines():
                if i=="\n" or i=="" or i==" ":
                    pass
                else:
                    exxen+=1
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='Exxen- 10Coin', callback_data='ex1'))
            markup.add(types.InlineKeyboardButton(text='Blutv- 10Coin', callback_data='ex2'))
            bot.send_message(userid,f"Stok:\nBluTv: {blus}\nExxen: {exxen}",parse_mode="Markdown",reply_markup=markup)
    def exekle(message):
        hesp=""
        hesap=message.text 
        for i in open("exxen.txt","r").read().splitlines():
            if len(i) <= 4:
                pass
            else:
                hesp+= (i + "\n")
                open("exxen.txt","w").write(hesp)
        hesap=open("exxen.txt","r").read()+"\n" + hesap +"\n"
        open("exxen.txt","w").write(hesap)
    def blekle(message):
        hesp=""
        hesap=message.text 
        for i in open("blutv.txt","r").read().splitlines():
            if len(i) <= 4:
                pass
            else:
                hesp+= (i + "\n")
                open("blutv.txt","w").write(hesp)
        hesap=open("blutv.txt","r").read()+"\n" + hesap +"\n"
        open("blutv.txt","w").write(hesap)
    if __name__ == '__main__':
        bot.polling(none_stop=True)
except:
    pass
